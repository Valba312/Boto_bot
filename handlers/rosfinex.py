"""Handlers for a simple agency workflow used in ROSFINEX."""

import logging
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton

from config import ADMIN_IDS
from db import repository as db
import re

_NEW_APP_DATA = {}


def _main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", "–ú–æ–∏ –∑–∞—è–≤–∫–∏")
    return kb

def _help_text(role: str) -> str:
    base = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (/newapp)\n"
        "–ú–æ–∏ –∑–∞—è–≤–∫–∏ ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (/myapps)"
    )
    if role == 'admin':
        base += (
            "\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/allapps ‚Äî –≤—Å–µ –∑–∞—è–≤–∫–∏\n"
            "/setstatus <id> <—Å—Ç–∞—Ç—É—Å> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
            "/setrole <id> <—Ä–æ–ª—å> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å"
        )
    return base

logger = logging.getLogger(__name__)


def register(bot):
    """Register bot commands for ROSFINEX."""

    @bot.message_handler(commands=['start'])
    def cmd_start(m: Message):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
        user_id = m.from_user.id
        name = m.from_user.full_name
        stored = db.get_user(user_id)
        if stored:
            role = stored[2]
        else:
            role = 'admin' if (user_id in ADMIN_IDS or not db.any_admins()) else 'agent'
            db.add_user(user_id, None, name, role)
        phone = stored[0] if stored else None
        if not phone:
            kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.add(KeyboardButton('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact=True))
            bot.reply_to(m, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb)
        else:
            text = f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role}\n' + _help_text(role)
            bot.reply_to(m, text, reply_markup=_main_menu())

    @bot.message_handler(content_types=['contact'])
    def contact_handler(m: Message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not m.contact or m.contact.user_id != m.from_user.id:
            return
        db.update_user_phone(m.from_user.id, m.contact.phone_number)
        role = db.get_user_role(m.from_user.id)
        text = '–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n' + _help_text(role)
        bot.reply_to(m, text, reply_markup=_main_menu())

    @bot.message_handler(commands=['newapp'])
    @bot.message_handler(func=lambda m: m.text == '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
    def cmd_newapp(m: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
        msg = bot.reply_to(m, '–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞?')
        _NEW_APP_DATA[m.from_user.id] = {}
        bot.register_next_step_handler(msg, _step_phone)

    def _step_phone(message: Message):
        full_name = (message.text or '').strip()
        if not full_name or full_name.startswith('/'):
            msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞?')
            bot.register_next_step_handler(msg, _step_phone)
            return
        data = _NEW_APP_DATA.get(message.from_user.id, {})
        data['full_name'] = full_name
        msg = bot.send_message(message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞?')
        _NEW_APP_DATA[message.from_user.id] = data
        bot.register_next_step_handler(msg, _step_city)

    def _step_city(message: Message):
        phone = (message.text or '').strip()
        if not re.fullmatch(r'\+?\d{5,15}', phone):
            msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞?')
            bot.register_next_step_handler(msg, _step_city)
            return
        data = _NEW_APP_DATA.get(message.from_user.id, {})
        data['phone'] = phone
        msg = bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞?')
        _NEW_APP_DATA[message.from_user.id] = data
        bot.register_next_step_handler(msg, _step_interest)

    def _step_interest(message: Message):
        city = (message.text or '').strip()
        if not city:
            msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞?')
            bot.register_next_step_handler(msg, _step_interest)
            return
        data = _NEW_APP_DATA.get(message.from_user.id, {})
        data['city'] = city
        msg = bot.send_message(message.chat.id, '–ò–Ω—Ç–µ—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞?')
        _NEW_APP_DATA[message.from_user.id] = data
        bot.register_next_step_handler(msg, _step_comment)

    def _step_comment(message: Message):
        interest = (message.text or '').strip()
        if not interest:
            msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò–Ω—Ç–µ—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞?')
            bot.register_next_step_handler(msg, _step_comment)
            return
        data = _NEW_APP_DATA.get(message.from_user.id, {})
        data['interest'] = interest
        msg = bot.send_message(message.chat.id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')
        _NEW_APP_DATA[message.from_user.id] = data
        bot.register_next_step_handler(msg, _finish_newapp)

    def _finish_newapp(message: Message):
        data = _NEW_APP_DATA.pop(message.from_user.id, {})
        comment = (message.text or '').strip()
        if not comment:
            msg = bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')
            _NEW_APP_DATA[message.from_user.id] = data
            bot.register_next_step_handler(msg, _finish_newapp)
            return
        full_name = data.get('full_name')
        phone = data.get('phone')
        city = data.get('city')
        interest = data.get('interest')
        app_id = db.add_application(
            message.from_user.id,
            full_name,
            phone,
            city,
            interest,
            comment,
        )
        bot.send_message(message.chat.id, f'–ó–∞—è–≤–∫–∞ #{app_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=_main_menu())

    @bot.message_handler(commands=['myapps'])
    @bot.message_handler(func=lambda m: m.text == '–ú–æ–∏ –∑–∞—è–≤–∫–∏')
    def cmd_myapps(m: Message):
        """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        apps = db.get_user_applications(m.from_user.id)
        if not apps:
            return bot.reply_to(m, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫', reply_markup=_main_menu())
        lines = [f"{row[0]}: {row[1]} - {row[2]}" for row in apps]
        bot.reply_to(m, '\n'.join(lines), reply_markup=_main_menu())

    @bot.message_handler(commands=['allapps'])
    def cmd_allapps(m: Message):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)."""
        if m.from_user.id not in ADMIN_IDS:
            return
        apps = db.get_all_applications()
        if not apps:
            return bot.reply_to(m, '–ù–µ—Ç –∑–∞—è–≤–æ–∫')
        lines = [f"{row[0]}: {row[1]} - {row[2]}" for row in apps]
        bot.reply_to(m, '\n'.join(lines))

    @bot.message_handler(commands=['setstatus'])
    def cmd_setstatus(m: Message):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)."""
        if m.from_user.id not in ADMIN_IDS:
            return
        parts = m.text.split(maxsplit=2)
        if len(parts) < 3:
            return bot.reply_to(m, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setstatus id —Å—Ç–∞—Ç—É—Å')
        try:
            app_id = int(parts[1])
        except ValueError:
            return bot.reply_to(m, 'id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        status = parts[2].strip()
        db.update_application_status(app_id, status)
        bot.reply_to(m, '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω')

    @bot.message_handler(commands=['setrole'])
    def cmd_setrole(m: Message):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)."""
        if m.from_user.id not in ADMIN_IDS:
            return
        parts = m.text.split(maxsplit=2)
        if len(parts) < 3:
            return bot.reply_to(m, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setrole id —Ä–æ–ª—å')
        try:
            uid = int(parts[1])
        except ValueError:
            return bot.reply_to(m, 'id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        role = parts[2].strip()
        db.update_user_role(uid, role)
        bot.reply_to(m, '–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

